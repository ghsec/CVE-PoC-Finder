package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"text/tabwriter"
)

type ResponseData map[string][]string

func main() {
	cveFilter := flag.String("cve", "", "CVE filter")
	flag.Parse()

	url := "https://raw.githubusercontent.com/ARPSyndicate/cvemon/master/data.json"

	for url != "" {
		// Send HTTP GET request
		resp, err := http.Get(url)
		if err != nil {
			fmt.Printf("Error sending request: %s\n", err)
			return
		}
		defer resp.Body.Close()

		// Read response body
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			fmt.Printf("Error reading response: %s\n", err)
			return
		}

		// Unmarshal JSON
		var data ResponseData
		err = json.Unmarshal(body, &data)
		if err != nil {
			fmt.Printf("Error parsing JSON: %s\n", err)
			return
		}

		// Create a new tab writer
		w := tabwriter.NewWriter(os.Stdout, 0, 0, 3, ' ', 0)

		// Create a map to store unique references
		uniqueReferences := make(map[string]bool)

		// Print formatted output
		fmt.Println()
		fmt.Fprintln(w, "CVE\t\t\t\t References of PoC")
		fmt.Fprintln(w, "---------------------------------------------------------------")
		for cve, references := range data {
			if *cveFilter != "" && cve != *cveFilter {
				continue
			}

			fmt.Fprintf(w, "%s\t%s\n", cve, references[0])
			uniqueReferences[references[0]] = true
			for _, ref := range references[1:] {
				if !uniqueReferences[ref] {
					fmt.Fprintf(w, "\t%s\n", ref)
					uniqueReferences[ref] = true
				}
			}
			fmt.Fprintln(w, "---------------------------------------------------------------")
		}

		// Flush the tab writer's buffer
		w.Flush()

		// Extract the next URL
		nextURLs, exists := data["next"]
		if exists && len(nextURLs) > 0 {
			url = nextURLs[0]
		} else {
			url = ""
		}
	}
}

